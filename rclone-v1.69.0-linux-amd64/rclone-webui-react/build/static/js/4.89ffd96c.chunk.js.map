{"version":3,"sources":["views/Base/BackendStatusCard/BackendStatusCard.js","actions/statusActions.js","../node_modules/reactstrap/es/Progress.js","views/Base/RunningJobs/RunningJobs.js","../../../js/custom-tooltips.js","../../../js/index.js","../node_modules/reactstrap/es/Collapse.js"],"names":["TaskModal","ReactDOM","createPortal","React","createElement","RunningJobs","mode","document","getElementById","MODAL_ROOT_ELEMENT","BackendStatusCard","Component","constructor","arguments","toggleCheckStatus","checkStatus","enableCheckStatus","this","props","console","log","componentDidMount","getStatus","refreshInterval","setInterval","STATUS_REFRESH_TIMEOUT","componentWillUnmount","clearInterval","render","isConnected","ipAddress","localStorage","getItem","IP_ADDRESS_KEY","username","USER_NAME_KEY","Card","className","CardHeader","CardBody","StatusText","connectivityStatus","userName","Fragment","Button","type","onClick","_ref","statusText","defaultProps","connect","state","status","isDisabled","async","dispatch","getState","getStats","then","res","FETCH_STATUS","REQUEST_SUCCESS","payload","error","REQUEST_ERROR","shouldEnable","ENABLE_STATUS_CHECK","getBandwidth","getCurrentBandwidthSetting","GET_BANDWIDTH","setBandwidth","newRate","setCurrentBandwidthSetting","SET_BANDWIDTH","_excluded","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","propTypes","children","PropTypes","node","bar","bool","multi","tag","tagPropType","value","oneOfType","string","number","min","max","animated","striped","color","barClassName","cssModule","style","barStyle","barAriaValueText","barAriaLabelledBy","Progress","Tag","attributes","_objectWithoutPropertiesLoose","percent","toNumber","progressClasses","mapToCssModules","classNames","progressBarProps","width","role","_extends","options","tooltips","enabled","custom","CustomTooltips","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","xAxes","display","JobCard","job","name","eta","percentage","speed","speedAvg","size","bytes","isNaN","formatBytes","secondsToStr","JobCardRow","_ref2","Row","Col","lg","substr","getCroppedName","GlobalStatus","_ref3","stats","checks","elapsedTime","deletes","errors","transfers","lastError","TransferringJobs","_ref4","transferring","undefined","map","item","idx","TransferringJobsRow","_ref5","grouped","groupByKey","group","array","val","JobGroup","groupId","_ref6","showCollapse","setShowCollapse","useState","cancelButtonEnabled","setCancelButtonEnabled","Container","sm","disabled","e","stopJob","stopPropagation","indexOf","jobid","split","axiosInstance","post","urls","_async","toast","info","concat","catch","err","Collapse","isOpen","context","super","toggleShowing","setState","prevState","isShowing","jobs","lineChartData","Line","data","overflowY","mapStateToProps","ownProps","speedData","labels","data1","data2","dataLength","slice","Math","ceil","bytesToKB","toFixed","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","tooltipModel","_this","ClassName","Selector","DIV","SPAN","TOOLTIP","_chart","canvas","id","_idMaker","random","toString","_canvasId","_setCanvasId","tooltip","parentNode","appendChild","opacity","classList","remove","yAlign","add","body","titleLines","title","tooltipHeader","tooltipHeaderTitle","innerHTML","tooltipBody","lines","tooltipBodyItem","colors","labelColors","tooltipBodyItemColor","tooltipBodyItemLabel","tooltipBodyItemValue","pop","_tooltipBodyItemValue","position","getBoundingClientRect","positionY","offsetTop","positionLeft","offsetLeft","caretX","positionTop","caretY","halfWidth","left","top","customTooltips","_transitionStatusToCl","Transition","arrayOf","navbar","innerRef","func","appear","enter","exit","timeout","TransitionTimeouts","transitionStatusToClassHash","TransitionStatuses","ENTERING","ENTERED","EXITING","EXITED","getHeight","scrollHeight","_Component","call","height","bind","_assertThisInitialized","_inheritsLoose","_proto","prototype","onEntering","isAppearing","onEntered","onExit","onExiting","offsetHeight","onExited","_this2","_this$props","otherProps","transitionProps","pick","TransitionPropTypeKeys","childProps","omit","in","collapseClass","getTransitionClass","classes","ref"],"mappings":"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","file":"static/js/4.89ffd96c.chunk.js","sourcesContent":["import React from \"react\";\nimport {Button, Card, CardBody, CardHeader} from \"reactstrap\";\nimport * as PropTypes from \"prop-types\";\nimport ReactDOM from \"react-dom\";\nimport RunningJobs from \"../RunningJobs\";\nimport {connect} from \"react-redux\";\nimport {enableCheckStatus, getStatus} from \"../../../actions/statusActions\";\nimport {IP_ADDRESS_KEY, MODAL_ROOT_ELEMENT, STATUS_REFRESH_TIMEOUT, USER_NAME_KEY} from \"../../../utils/Constants\";\n\n/**\n * Functional component Modal which is placed in the element with id \"modal-root\" in index.html using React.createPortal\n * @returns {{children, implementation, containerInfo, $$typeof, key}}\n * @constructor\n */\nfunction TaskModal() {\n    return ReactDOM.createPortal((\n        <RunningJobs mode={\"modal\"}/>\n\n    ), document.getElementById(MODAL_ROOT_ELEMENT));\n}\n\n/**\n * Component for display and monitoring of backend rclone status. Auto refresh status in redux store every 5 seconds.\n */\nclass BackendStatusCard extends React.Component {\n\n\n    componentDidMount() {\n\n        // Check if the connection to the backend is active\n        this.props.getStatus();\n        this.refreshInterval = setInterval(() => this.props.getStatus(), STATUS_REFRESH_TIMEOUT);\n    }\n\n\n    componentWillUnmount() {\n        // Clear the interval before component is unmounted\n        clearInterval(this.refreshInterval);\n    }\n\n    /**\n     * Enable or disable checking of status request by http request to the backend.\n     */\n    toggleCheckStatus = () => {\n        const {checkStatus, enableCheckStatus} = this.props;\n        console.log(checkStatus, enableCheckStatus);\n        enableCheckStatus(!checkStatus);\n    };\n\n    /**\n     * Renders the component with mode.\n     * Card: Enables the card mode.\n     * Default: Table mode (Grid)\n     * @returns {*}\n     */\n    render() {\n        const {isConnected, mode, checkStatus} = this.props;\n\n        const ipAddress = localStorage.getItem(IP_ADDRESS_KEY);\n        const username = localStorage.getItem(USER_NAME_KEY);\n\n\n        if (mode === \"card\")\n            return (\n\n                <Card\n                    className={\"text-center \" + (isConnected ? \"card-accent-info\" : \"card-accent-warning\")}>\n                    <CardHeader>\n                        Overview\n                    </CardHeader>\n                    <CardBody>\n                        <StatusText checkStatus={checkStatus} connectivityStatus={isConnected} ipAddress={ipAddress}\n                                    userName={username}/>\n\n                    </CardBody>\n                </Card>\n            );\n        else /*Default*/\n            return (\n                <React.Fragment>\n                    <Button type=\"primary\" onClick={this.toggleCheckStatus}\n                            className={isConnected ? \"bg-info  d-none d-lg-block\" : \"bg-warning d-none d-lg-block\"}> {checkStatus ? isConnected ? \"CONNECTED\" : \"DISCONNECTED\" : \"DISABLED\"}</Button>\n                    {/*Show current tasks in the side modal*/}\n                    <TaskModal/>\n                </React.Fragment>\n            );\n    }\n}\n\n/**\n *\n * @param connectivityStatus    {boolean}   Current connectivity status to the backend.\n * @param checkStatus           {boolean}   Specify whether to check the status or skip.\n * @param ipAddress             {string}    IP Address of the backend\n * @param userName              {string}    User name of the currently logged in user.\n * @returns {*}\n * @constructor\n */\nfunction StatusText({connectivityStatus, checkStatus, ipAddress, userName}) {\n\n    let statusText = \"\";\n    if(!checkStatus){\n        statusText = \"Not monitoring connectivity status. Tap the icon in navbar to start.\";\n    }else if(connectivityStatus){\n        // Connected to backend\n        statusText = \"rClone Backend is connected and working as expected\";\n    }else{\n        statusText = \"Cannot connect to rclone backend. There is a problem with connecting to {ipAddress}.\"\n    }\n\n    return (\n        <>\n            <p>\n                <span className={\"card-subtitle\"}>Status: {\" \"}</span>\n                <span className=\"card-text\">{statusText}</span>\n            </p>\n            <p>\n                <span className={\"card-subtitle\"}>Current IP Address: {\" \"}</span>\n                <span className=\"card-text\">{ipAddress}</span>\n            </p>\n            <p>\n                <span className={\"card-subtitle\"}>Username: {\" \"}</span>\n                <span className=\"card-text\">{userName}</span>\n            </p>\n        </>\n    )\n}\n\nconst propTypes = {\n    /**\n     * Used to specify mode of render : card/ grid.\n     */\n    mode: PropTypes.string.isRequired,\n    /**\n     * Boolean to represent internet connectivity\n     */\n    isConnected: PropTypes.bool.isRequired,\n    /**\n     * Boolean to represent whether checking for status at interval is allowed\n     */\n    checkStatus: PropTypes.bool.isRequired,\n\n    /**\n     * Function to enable or disable status check\n     */\n    enableCheckStatus: PropTypes.func.isRequired,\n\n    /**\n     * Get the current status\n     */\n    getStatus: PropTypes.func.isRequired\n};\n\nconst defaultProps = {\n    mode: \"card\",\n};\n\n\nBackendStatusCard.propTypes = propTypes;\nBackendStatusCard.defaultProps = defaultProps;\n\nconst mapStateToProps = state => ({\n    isConnected: state.status.isConnected,\n    isDisabled: state.status.isDisabled,\n    checkStatus: state.status.checkStatus\n});\n\nexport default connect(mapStateToProps, {getStatus, enableCheckStatus})(BackendStatusCard);\n","import {ENABLE_STATUS_CHECK, FETCH_STATUS, GET_BANDWIDTH, REQUEST_ERROR, REQUEST_SUCCESS, SET_BANDWIDTH} from \"./types\";\nimport {getCurrentBandwidthSetting, getStats, setCurrentBandwidthSetting} from \"rclone-api\";\n\n/**\n * Gets the current status of the rclone backend.\n * Depends upon state.status.checkStatus to execute the http request, if set to false, does not send any http request\n * @returns {Function}\n */\nexport const getStatus = () => async (dispatch, getState) => {\n    // console.log(\"get Status\");\n    const {status} = getState();\n    if (status.checkStatus) {\n        getStats().then(res => dispatch({\n            type: FETCH_STATUS,\n            status: REQUEST_SUCCESS,\n            payload: res\n        }), error => dispatch({\n            type: FETCH_STATUS,\n            status: REQUEST_ERROR,\n            payload: error\n        }))\n    }\n};\n\n/**\n * Enables or disables the check status functionality to improve network performance.\n * Modifies state.status.checkStatus according to the passed value.\n * @param shouldEnable {boolean} It specifies whether to check for status updates from the backend or skip checking it\n * @returns {Function}\n */\nexport const enableCheckStatus = (shouldEnable) => async dispatch => {\n    dispatch({\n        type: ENABLE_STATUS_CHECK,\n        payload: shouldEnable\n    })\n};\n\n\n/**\n * Gets the current bandwidth set in the rclone backend.\n * @returns {Function}\n */\nexport const getBandwidth = () => async dispatch => {\n    // console.log(\"get Status\");\n    getCurrentBandwidthSetting().then(res => dispatch({\n        type: GET_BANDWIDTH,\n        status: REQUEST_SUCCESS,\n        payload: res\n    }), error => dispatch({\n        type: GET_BANDWIDTH,\n        status: REQUEST_ERROR,\n        payload: error\n    }))\n};\n\n/**\n * Changes the current bandwidth limit of the rclone backend.\n * @param newRate {string} Human readable format of size eg: 1M|2M|1.2G specifying 1MB, 2MB, 1.2GB respectively.\n * @returns {Function}\n */\nexport const setBandwidth = (newRate) => async dispatch => {\n    // console.log(\"get Status\");\n    setCurrentBandwidthSetting(newRate).then(res => dispatch({\n        type: SET_BANDWIDTH,\n        status: REQUEST_SUCCESS,\n        payload: res\n    }), error => dispatch({\n        type: SET_BANDWIDTH,\n        status: REQUEST_ERROR,\n        payload: error\n    }))\n};\n\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"children\", \"className\", \"barClassName\", \"cssModule\", \"value\", \"min\", \"max\", \"animated\", \"striped\", \"color\", \"bar\", \"multi\", \"tag\", \"style\", \"barStyle\", \"barAriaValueText\", \"barAriaLabelledBy\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType, toNumber } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  bar: PropTypes.bool,\n  multi: PropTypes.bool,\n  tag: tagPropType,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  min: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  animated: PropTypes.bool,\n  striped: PropTypes.bool,\n  color: PropTypes.string,\n  className: PropTypes.string,\n  barClassName: PropTypes.string,\n  cssModule: PropTypes.object,\n  style: PropTypes.object,\n  barStyle: PropTypes.object,\n  barAriaValueText: PropTypes.string,\n  barAriaLabelledBy: PropTypes.string\n};\nvar defaultProps = {\n  tag: 'div',\n  value: 0,\n  min: 0,\n  max: 100,\n  style: {},\n  barStyle: {}\n};\n\nvar Progress = function Progress(props) {\n  var children = props.children,\n      className = props.className,\n      barClassName = props.barClassName,\n      cssModule = props.cssModule,\n      value = props.value,\n      min = props.min,\n      max = props.max,\n      animated = props.animated,\n      striped = props.striped,\n      color = props.color,\n      bar = props.bar,\n      multi = props.multi,\n      Tag = props.tag,\n      style = props.style,\n      barStyle = props.barStyle,\n      barAriaValueText = props.barAriaValueText,\n      barAriaLabelledBy = props.barAriaLabelledBy,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var percent = toNumber(value) / toNumber(max) * 100;\n  var progressClasses = mapToCssModules(classNames(className, 'progress'), cssModule);\n  var progressBarClasses = mapToCssModules(classNames('progress-bar', bar ? className || barClassName : barClassName, animated ? 'progress-bar-animated' : null, color ? \"bg-\" + color : null, striped || animated ? 'progress-bar-striped' : null), cssModule);\n  var progressBarProps = {\n    className: progressBarClasses,\n    style: _objectSpread(_objectSpread(_objectSpread({}, bar ? style : {}), barStyle), {}, {\n      width: percent + \"%\"\n    }),\n    role: 'progressbar',\n    'aria-valuenow': value,\n    'aria-valuemin': min,\n    'aria-valuemax': max,\n    'aria-valuetext': barAriaValueText,\n    'aria-labelledby': barAriaLabelledBy,\n    children: children\n  };\n\n  if (bar) {\n    return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, progressBarProps));\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    style: style,\n    className: progressClasses\n  }), multi ? children : /*#__PURE__*/React.createElement(\"div\", progressBarProps));\n};\n\nProgress.propTypes = propTypes;\nProgress.defaultProps = defaultProps;\nexport default Progress;","import React, {useState} from 'react';\nimport {Button, Card, CardBody, CardHeader, Col, Collapse, Container, Progress, Row} from \"reactstrap\";\nimport {bytesToKB, formatBytes, groupByKey, secondsToStr} from \"../../../utils/Tools\";\nimport * as PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {Line} from \"react-chartjs-2\";\nimport {CustomTooltips} from \"@coreui/coreui-plugin-chartjs-custom-tooltips\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport urls from \"../../../utils/API/endpoint\";\nimport {toast} from \"react-toastify\";\n\nconst options = {\n    tooltips: {\n        enabled: false,\n        custom: CustomTooltips\n    },\n    maintainAspectRatio: false,\n    scales: {\n        yAxes: [{\n            ticks: {\n                beginAtZero: true\n            }\n        }],\n        xAxes: [{\n            ticks: {\n                display: false\n            }\n        }]\n    }\n};\nfunction JobCard({job}) {\n    const {name, eta, percentage, speed, speedAvg, size, bytes} = job;\n    if (name && !isNaN(speed)) {\n\n        return (<Card>\n            <CardHeader>Running Jobs</CardHeader>\n            <CardBody>\n                <p>{name}</p> {/*Name of the file*/}\n                <Progress value={percentage} className={\"mb-2\"}>{percentage} %</Progress> {/*percentage*/}\n                <p><strong>Speed: </strong>{formatBytes(speed)}PS</p> {/*speed*/}\n                <p><strong>Average Speed: </strong>{formatBytes(speedAvg)}PS</p> {/*speedAvg*/}\n                <p><strong>Total transferred: </strong>{formatBytes(bytes)}</p> {/*bytes: convert to mb*/}\n                <p><strong>Size: </strong>{formatBytes(size)}</p>\n                <p><strong>ETA: </strong>{secondsToStr(eta)}</p>\n            </CardBody>\n\n        </Card>);\n    }\n    return null;\n}\n\nfunction getCroppedName(name) {\n    const leftChars = 30;\n    const rightChars = 5;\n\n    if (name.length > leftChars) {\n        const croppedName = name.substr(0, leftChars) + \" ... \" + name.substr(-rightChars);\n        return croppedName;\n    }\n    return name;\n\n}\n\nfunction JobCardRow({job}) {\n    // https://github.com/rclone/rclone-webui-react/issues/99:\n    // Speed and AvgSpeed seem to be swapped in Running Jobs Card #99\n    const {name, percentage, speedAvg, size} = job;\n    console.log(\"Job:\" + job);\n    return (\n        <React.Fragment>\n            <Row className=\"runningJobs\">\n                {(size && speedAvg) ? (\n\n                    <Col lg={12} className=\"itemName\"> {getCroppedName(name)} {\" \"}\n                        ({formatBytes(size)}) - {formatBytes(speedAvg)}PS </Col>\n                ) : (\n                    <Col lg={12}>Calculating</Col>)}\n\n            </Row>\n            <Row>\n                <Col lg={12}><Progress value={percentage} className={\"mb-2\"}>{percentage} %</Progress></Col>\n            </Row>\n\n        </React.Fragment>\n    );\n\n\n}\n\nfunction GlobalStatus({stats}) {\n    const {speed, bytes, checks, elapsedTime, deletes, errors, transfers, lastError} = stats;\n    return (\n        <Card>\n            <CardHeader><strong>Global Stats</strong></CardHeader>\n            <CardBody>\n                <table className=\"table\">\n                    <tbody>\n                    <tr>\n                        <td className=\"card-subtitle\">Bytes Transferred:</td>\n                        <td className=\"card-text\">{formatBytes(bytes)}</td>\n                    </tr>\n                    <tr>\n                        <td className=\"card-subtitle\">Average Speed:</td>\n                        <td className=\"card-text\">{formatBytes(speed)}PS</td>\n                    </tr>\n                    <tr>\n                        <td className=\"card-subtitle\">Checks:</td>\n                        <td className=\"card-text\">{checks}</td>\n                    </tr>\n                    <tr>\n                        <td className=\"card-subtitle\">Deletes:</td>\n                        <td className=\"card-text\">{deletes}</td>\n                    </tr>\n                    <tr>\n                        <td className=\"card-subtitle\">Running since:</td>\n                        <td className=\"card-text\">{secondsToStr(elapsedTime)}</td>\n                    </tr>\n                    <tr className={errors > 0 ? \"table-danger\" : \"\"}>\n                        <td className=\"card-subtitle\">Errors:</td>\n                        <td className=\"card-text\">{errors}</td>\n                    </tr>\n                    <tr>\n                        <td className=\"card-subtitle\">Transfers:</td>\n                        <td className=\"card-text\">{transfers}</td>\n                    </tr>\n                    <tr>\n                        <td className=\"card-subtitle\">Last Error:</td>\n                        <td className=\"card-text\">{lastError}</td>\n                    </tr>\n\n                    </tbody>\n                </table>\n\n            </CardBody>\n            {/*<CardFooter></CardFooter>*/}\n\n        </Card>);\n}\n\nfunction TransferringJobs({transferring}) {\n    if (transferring !== undefined) {\n        return transferring.map((item, idx) => {\n            return (<JobCard key={item.name} job={item}/>);\n        });\n    }\n    return null;\n}\n\nfunction TransferringJobsRow({transferring}) {\n    if (transferring !== undefined) {\n        const grouped = groupByKey(transferring, job => job.group);\n\n        const array = [];\n\n        grouped.forEach((val, keys) => {\n            array.push (<JobGroup job={val} groupId={keys} key={keys}/>);\n        });\n        return array;\n\n        // return grouped.values().map((item, idx) => {\n        // \treturn (<JobCardRow key={item.name} job={item}/>);\n        // });\n    }\n    return null;\n}\n\nfunction JobGroup({job, groupId}) {\n    const [showCollapse, setShowCollapse] = useState(false);\n    const [cancelButtonEnabled, setCancelButtonEnabled] = useState(true);\n\n    const stopJob = (e, groupId) => {\n        e.stopPropagation();\n        if(groupId && groupId.indexOf('/') !== -1) {\n            setCancelButtonEnabled(false);\n            const jobid = groupId.split('/')[1];\n            axiosInstance.post(urls.stopJob, {jobid, _async:true}).then(function (res) {\n                toast.info(`Job ${jobid} stopped`);\n            }).catch(err => {\n                toast.error(`Job ${jobid} couldn't be stopped`)\n            })\n        }\n    };\n    // setCancelButtonEnabled((groupId && groupId !== \"undefined\"));\n    if(job) {\n        return (\n            <>\n                {groupId &&\n                <Card>\n\n                    <CardHeader onClick={() => setShowCollapse(!showCollapse)}>\n                        <Container>\n                            <Row>\n                                <Col sm={10}>\n                                    Transferring {job.length} file(s)\n                                </Col>\n                                <Col sm={2}>\n                                    <Button color={\"light\"} disabled={!cancelButtonEnabled}\n                                            onClick={(e) => stopJob(e, groupId)}\n                                            className={\"btn-outline-danger btn-pill\"}><i\n                                        className=\"fa fa-close fa-sm\"/></Button>\n                                </Col>\n                            </Row>\n                        </Container>\n                    </CardHeader>\n                    <Collapse isOpen={showCollapse}>\n                        <CardBody>\n                            {\n                                job.map((item, idx) => {\n                                    return (<JobCardRow key={item.name} job={item}/>);\n                                })\n                            }\n                        </CardBody>\n                    </Collapse>\n                </Card>\n                }\n            </>\n        );\n    }\n    return null;\n}\n\n\nclass RunningJobs extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            isShowing: true\n        }\n    }\n\n    toggleShowing = () => {\n        this.setState((prevState) => {\n            return {\n                isShowing: !prevState.isShowing\n            }\n        })\n    };\n\n\n\n\n\n    render() {\n        const {jobs, isConnected, lineChartData} = this.props;\n        const {transferring} = jobs;\n        const {mode} = this.props;\n        if (mode === \"full-status\") {\n            if (isConnected) {\n                return (\n                    <Row>\n                        <Col sm={12} lg={6}>\n                            <GlobalStatus stats={jobs}/>\n                        </Col>\n\n                        <Col sm={12} lg={6}>\n                            <Card>\n                                <CardHeader>\n                                    Speed\n                                </CardHeader>\n                                <CardBody>\n                                    <div className=\"chart-wrapper\">\n                                        <Line data={lineChartData} options={options}/>\n                                    </div>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                        <Col sm={12} lg={4}>\n                            <TransferringJobs transferring={transferring}/>\n                        </Col>\n                    </Row>\n                );\n            } else {\n                return (<div>Not connected to rclone.</div>)\n            }\n\n        } else if (mode === \"card\") {\n            if (isConnected) {\n                return (\n                    <TransferringJobsRow transferring={transferring}/>\n                );\n            } else {\n                return (<div>Not connected to rclone.</div>);\n            }\n\n        } else if (mode === \"modal\") {\n            if (transferring && transferring.length > 0)\n                return (\n                    <Card className=\"progress-modal d-none d-sm-block\">\n                        <CardHeader onClick={() => this.toggleShowing()}>Progress\n                            <div className=\"card-header-actions\">\n                                <Button color=\"link\">\n                                    <i className=\"fa fa-close fa-lg\"/>\n                                </Button>\n                            </div>\n                        </CardHeader>\n                        <CardBody className={!this.state.isShowing ? \"d-none\" : \"progress-modal-body\"}  style={{overflowY: 'scroll'}}>\n                            <TransferringJobsRow transferring={transferring}/>\n\n                        </CardBody>\n                    </Card>\n                );\n            return null;\n        }\n    }\n}\n\nRunningJobs.propTypes = {\n    mode: PropTypes.string.isRequired,\n    isConnected: PropTypes.bool.isRequired,\n    jobs: PropTypes.object.isRequired,\n    error: PropTypes.object\n};\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const speedData = state.status.speed;\n    let lineChartData = {};\n    if (speedData) {\n        let labels = [];\n        let data1 = [];\n        let data2 = [];\n\n        const dataLength = speedData.length;\n        //\n        const limitedData = speedData.slice(dataLength - 50, dataLength - 1);\n        limitedData.forEach((item, idx) => {\n            labels.push(Math.ceil(item.elapsedTime));\n            data1.push(bytesToKB(item.speed).toFixed(2));\n            data2.push(bytesToKB(item.speedAvg).toFixed(2));\n        });\n\n        lineChartData = {\n            labels: labels,\n            datasets: [\n                {\n                    label: 'Speed (kbps)',\n                    fill: false,\n                    lineTension: 0.1,\n                    backgroundColor: 'rgba(75,192,192,0.4)',\n                    borderColor: 'rgba(75,192,192,1)',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: 'rgba(75,192,192,1)',\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: data1,\n                },\n                {\n                    label: 'Average Speed (kbps)',\n                    fill: true,\n                    lineTension: 0.1,\n                    backgroundColor: 'rgba(187,69,14,0.4)',\n                    borderColor: 'rgb(192,76,58)',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: 'rgb(187,69,14)',\n                    pointBackgroundColor: '#ff7459',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: data2,\n                }\n            ],\n        };\n    }\n\n\n    return {\n        jobs: state.status.jobs,\n        isConnected: state.status.isConnected,\n        error: state.status.error,\n        lineChartData\n    }\n};\n\nexport default connect(mapStateToProps, {})(RunningJobs);\n","/**\n * --------------------------------------------------------------------------\n * CoreUI Plugins - Custom Tooltips for Chart.js (v1.3.1): custom-tooltips.js\n * Licensed under MIT (https://coreui.io/license)\n * --------------------------------------------------------------------------\n */\n\nfunction CustomTooltips(tooltipModel) {\n  // Add unique id if not exist\n  const _setCanvasId = () => {\n    const _idMaker = () => {\n      const _hex = 16\n      const _multiplier = 0x10000\n      return ((1 + Math.random()) * _multiplier | 0).toString(_hex)\n    }\n    const _canvasId = `_canvas-${_idMaker() + _idMaker()}`\n    this._chart.canvas.id = _canvasId\n    return _canvasId\n  }\n\n  const ClassName = {\n    ABOVE                   : 'above',\n    BELOW                   : 'below',\n    CHARTJS_TOOLTIP         : 'chartjs-tooltip',\n    NO_TRANSFORM            : 'no-transform',\n    TOOLTIP_BODY            : 'tooltip-body',\n    TOOLTIP_BODY_ITEM       : 'tooltip-body-item',\n    TOOLTIP_BODY_ITEM_COLOR : 'tooltip-body-item-color',\n    TOOLTIP_BODY_ITEM_LABEL : 'tooltip-body-item-label',\n    TOOLTIP_BODY_ITEM_VALUE : 'tooltip-body-item-value',\n    TOOLTIP_HEADER          : 'tooltip-header',\n    TOOLTIP_HEADER_ITEM     : 'tooltip-header-item'\n  }\n\n  const Selector = {\n    DIV     : 'div',\n    SPAN    : 'span',\n    TOOLTIP : `${this._chart.canvas.id || _setCanvasId()}-tooltip`\n  }\n\n  let tooltip = document.getElementById(Selector.TOOLTIP)\n\n  if (!tooltip) {\n    tooltip = document.createElement('div')\n    tooltip.id = Selector.TOOLTIP\n    tooltip.className = ClassName.CHARTJS_TOOLTIP\n    this._chart.canvas.parentNode.appendChild(tooltip)\n  }\n\n  // Hide if no tooltip\n  if (tooltipModel.opacity === 0) {\n    tooltip.style.opacity = 0\n    return\n  }\n\n  // Set caret Position\n  tooltip.classList.remove(ClassName.ABOVE, ClassName.BELOW, ClassName.NO_TRANSFORM)\n  if (tooltipModel.yAlign) {\n    tooltip.classList.add(tooltipModel.yAlign)\n  } else {\n    tooltip.classList.add(ClassName.NO_TRANSFORM)\n  }\n\n  // Set Text\n  if (tooltipModel.body) {\n    const titleLines = tooltipModel.title || []\n\n    const tooltipHeader = document.createElement(Selector.DIV)\n    tooltipHeader.className = ClassName.TOOLTIP_HEADER\n\n    titleLines.forEach((title) => {\n      const tooltipHeaderTitle = document.createElement(Selector.DIV)\n      tooltipHeaderTitle.className = ClassName.TOOLTIP_HEADER_ITEM\n      tooltipHeaderTitle.innerHTML = title\n      tooltipHeader.appendChild(tooltipHeaderTitle)\n    })\n\n    const tooltipBody = document.createElement(Selector.DIV)\n    tooltipBody.className = ClassName.TOOLTIP_BODY\n\n    const tooltipBodyItems = tooltipModel.body.map((item) => item.lines)\n    tooltipBodyItems.forEach((item, i) => {\n      const tooltipBodyItem = document.createElement(Selector.DIV)\n      tooltipBodyItem.className = ClassName.TOOLTIP_BODY_ITEM\n\n      const colors = tooltipModel.labelColors[i]\n\n      const tooltipBodyItemColor = document.createElement(Selector.SPAN)\n      tooltipBodyItemColor.className = ClassName.TOOLTIP_BODY_ITEM_COLOR\n      tooltipBodyItemColor.style.backgroundColor = colors.backgroundColor\n\n      tooltipBodyItem.appendChild(tooltipBodyItemColor)\n\n      if (item[0].split(':').length > 1) {\n        const tooltipBodyItemLabel = document.createElement(Selector.SPAN)\n        tooltipBodyItemLabel.className = ClassName.TOOLTIP_BODY_ITEM_LABEL\n        tooltipBodyItemLabel.innerHTML = item[0].split(': ')[0]\n\n        tooltipBodyItem.appendChild(tooltipBodyItemLabel)\n\n        const tooltipBodyItemValue = document.createElement(Selector.SPAN)\n        tooltipBodyItemValue.className = ClassName.TOOLTIP_BODY_ITEM_VALUE\n        tooltipBodyItemValue.innerHTML = item[0].split(': ').pop()\n\n        tooltipBodyItem.appendChild(tooltipBodyItemValue)\n      } else {\n        const tooltipBodyItemValue = document.createElement(Selector.SPAN)\n        tooltipBodyItemValue.className = ClassName.TOOLTIP_BODY_ITEM_VALUE\n        tooltipBodyItemValue.innerHTML = item[0]\n\n        tooltipBodyItem.appendChild(tooltipBodyItemValue)\n      }\n\n      tooltipBody.appendChild(tooltipBodyItem)\n    })\n\n    tooltip.innerHTML = ''\n\n    tooltip.appendChild(tooltipHeader)\n    tooltip.appendChild(tooltipBody)\n  }\n\n  const position = this._chart.canvas.getBoundingClientRect()\n\n  const positionY = this._chart.canvas.offsetTop\n  const positionX = this._chart.canvas.offsetLeft\n\n  let positionLeft = positionX + tooltipModel.caretX\n  const positionTop = positionY + tooltipModel.caretY\n  // eslint-disable-next-line\n  const halfWidth = tooltipModel.width / 2\n\n  if (positionLeft + halfWidth > position.width) {\n    positionLeft -= halfWidth\n  } else if (positionLeft < halfWidth) {\n    positionLeft += halfWidth\n  }\n\n  // Display, position, and set styles for font\n  tooltip.style.opacity = 1\n  tooltip.style.left = `${positionLeft}px`\n  tooltip.style.top = `${positionTop}px`\n}\n\nexport default CustomTooltips\n","import CustomTooltips from './custom-tooltips'\nconst customTooltips = CustomTooltips\n// TODO: camel-case\nexport {\n  CustomTooltips,\n  customTooltips\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _excluded = [\"tag\", \"isOpen\", \"className\", \"navbar\", \"cssModule\", \"children\", \"innerRef\"];\n\nvar _transitionStatusToCl;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Transition } from 'react-transition-group';\nimport { mapToCssModules, omit, pick, TransitionTimeouts, TransitionPropTypeKeys, TransitionStatuses, tagPropType } from './utils';\n\nvar propTypes = _objectSpread(_objectSpread({}, Transition.propTypes), {}, {\n  isOpen: PropTypes.bool,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  tag: tagPropType,\n  className: PropTypes.node,\n  navbar: PropTypes.bool,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n});\n\nvar defaultProps = _objectSpread(_objectSpread({}, Transition.defaultProps), {}, {\n  isOpen: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  tag: 'div',\n  timeout: TransitionTimeouts.Collapse\n});\n\nvar transitionStatusToClassHash = (_transitionStatusToCl = {}, _transitionStatusToCl[TransitionStatuses.ENTERING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.ENTERED] = 'collapse show', _transitionStatusToCl[TransitionStatuses.EXITING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.EXITED] = 'collapse', _transitionStatusToCl);\n\nfunction getTransitionClass(status) {\n  return transitionStatusToClassHash[status] || 'collapse';\n}\n\nfunction getHeight(node) {\n  return node.scrollHeight;\n}\n\nvar Collapse = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Collapse, _Component);\n\n  function Collapse(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.state = {\n      height: null\n    };\n    ['onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited'].forEach(function (name) {\n      _this[name] = _this[name].bind(_assertThisInitialized(_this));\n    });\n    return _this;\n  }\n\n  var _proto = Collapse.prototype;\n\n  _proto.onEntering = function onEntering(node, isAppearing) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onEntering(node, isAppearing);\n  };\n\n  _proto.onEntered = function onEntered(node, isAppearing) {\n    this.setState({\n      height: null\n    });\n    this.props.onEntered(node, isAppearing);\n  };\n\n  _proto.onExit = function onExit(node) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onExit(node);\n  };\n\n  _proto.onExiting = function onExiting(node) {\n    // getting this variable triggers a reflow\n    var _unused = node.offsetHeight; // eslint-disable-line no-unused-vars\n\n    this.setState({\n      height: 0\n    });\n    this.props.onExiting(node);\n  };\n\n  _proto.onExited = function onExited(node) {\n    this.setState({\n      height: null\n    });\n    this.props.onExited(node);\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        Tag = _this$props.tag,\n        isOpen = _this$props.isOpen,\n        className = _this$props.className,\n        navbar = _this$props.navbar,\n        cssModule = _this$props.cssModule,\n        children = _this$props.children,\n        innerRef = _this$props.innerRef,\n        otherProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n    var height = this.state.height;\n    var transitionProps = pick(otherProps, TransitionPropTypeKeys);\n    var childProps = omit(otherProps, TransitionPropTypeKeys);\n    return /*#__PURE__*/React.createElement(Transition, _extends({}, transitionProps, {\n      in: isOpen,\n      onEntering: this.onEntering,\n      onEntered: this.onEntered,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }), function (status) {\n      var collapseClass = getTransitionClass(status);\n      var classes = mapToCssModules(classNames(className, collapseClass, navbar && 'navbar-collapse'), cssModule);\n      var style = height === null ? null : {\n        height: height\n      };\n      return /*#__PURE__*/React.createElement(Tag, _extends({}, childProps, {\n        style: _objectSpread(_objectSpread({}, childProps.style), style),\n        className: classes,\n        ref: _this2.props.innerRef\n      }), children);\n    });\n  };\n\n  return Collapse;\n}(Component);\n\nCollapse.propTypes = propTypes;\nCollapse.defaultProps = defaultProps;\nexport default Collapse;"],"sourceRoot":""}