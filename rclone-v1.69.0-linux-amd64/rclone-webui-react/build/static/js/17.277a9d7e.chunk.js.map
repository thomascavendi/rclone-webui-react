{"version":3,"sources":["../node_modules/reactstrap/es/Card.js","../node_modules/reactstrap/es/CardBody.js","actions/configActions.js","../node_modules/reactstrap/es/FormFeedback.js","../node_modules/reactstrap/es/Collapse.js","views/Base/NewDriveAuthModal/NewDriveAuthModal.js","views/RemoteManagement/NewDrive/ProviderAutoSuggest.js","views/RemoteManagement/NewDrive/NewDrive.js"],"names":["_excluded","propTypes","tag","tagPropType","inverse","PropTypes","bool","color","string","body","outline","className","cssModule","object","innerRef","oneOfType","func","Card","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","ref","defaultProps","CardBody","getProviders","dispatch","getAllProviders","then","data","type","GET_PROVIDERS","payload","providers","getConfigDump","getAllConfigDump","res","GET_CONFIG_DUMP","status","REQUEST_SUCCESS","error","REQUEST_ERROR","children","node","valid","tooltip","undefined","FormFeedback","validMode","_transitionStatusToCl","ownKeys","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","Transition","isOpen","arrayOf","navbar","appear","enter","exit","timeout","TransitionTimeouts","Collapse","transitionStatusToClassHash","TransitionStatuses","ENTERING","ENTERED","EXITING","EXITED","getHeight","scrollHeight","_Component","_this","call","this","state","height","name","bind","_assertThisInitialized","_inheritsLoose","_proto","prototype","onEntering","isAppearing","setState","onEntered","onExit","onExiting","offsetHeight","onExited","render","_this2","_this$props","otherProps","transitionProps","pick","TransitionPropTypeKeys","childProps","omit","in","collapseClass","getTransitionClass","style","Component","NewDriveAuthModal","constructor","super","toggle","closeModal","isVisible","ErrorBoundary","Modal","ModalHeader","data-test","ModalBody","ModalFooter","Button","onClick","getSuggestions","config","value","inputValue","trim","toLowerCase","inputLength","lang","Description","slice","getSuggestionValue","suggestion","Prefix","renderSuggestion","ProviderAutoSuggest","onSuggestionsFetchRequested","_ref","suggestions","onSuggestionsClearRequested","onChange","currentConfig","findFromConfig","renderVal","inputProps","placeholder","Autosuggest","alwaysRenderSuggestions","highlightFirstSuggestion","DriveParameters","drivePrefix","loadAdvanced","changeHandler","currentValues","isValidMap","errorsMap","currentProvider","outputMap","Options","map","attr","idx","Hide","Advanced","labelValue","concat","Help","requiredValue","Required","hasExamples","isEmpty","Examples","examplesMap","inputType","IsPassword","Type","FormGroup","row","Label","for","Name","sm","Col","Input","invalid","id","required","CustomInput","_ref2","label","isValid","NewDrive","context","e","handleInputChange","inputName","optionTypes","formValues","validateResult","validateSizeSuffix","validateDuration","validateInt","prevState","formErrors","changeDriveType","event","_ref3","newValue","val","availableOptions","item","DefaultStr","openSetupDrive","preventDefault","editAdvancedOptions","advancedOptions","clearForm","_","driveName","changeName","driveNameIsEditable","validateDriveName","driveNameIsValid","axiosInstance","post","urls","getConfigForRemote","response","errors","openAdvancedSettings","colAdvanced","configEndDiv","scrollIntoView","behavior","gotoNextStep","currentStepNumber","handleSubmit","setCurrentStep","gotoPrevStep","stepNo","StepShowCase","_ref4","stepTitles","Container","Row","Fragment","md","colRconfig","colSetup","formValuesValid","authModalIsVisible","configCheckInterval","toggleAuthModal","startAuthentication","checkConfigStatus","clearInterval","history","toast","autoClose","validateForm","flag","entries","setInterval","NEW_DRIVE_CONFIG_REFRESH_TIMEOUT","console","stopAuthentication","defaults","finalParameterValues","defaultValueObj","find","ele","array","parameters","match","params","updateConfig","info","createConfig","err","warn","componentDidMount","log","componentWillUnmount","href","isEdit","connect"],"mappings":"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","file":"static/js/17.277a9d7e.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"color\", \"body\", \"inverse\", \"outline\", \"tag\", \"innerRef\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  inverse: PropTypes.bool,\n  color: PropTypes.string,\n  body: PropTypes.bool,\n  outline: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar Card = function Card(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      color = props.color,\n      body = props.body,\n      inverse = props.inverse,\n      outline = props.outline,\n      Tag = props.tag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, 'card', inverse ? 'text-white' : false, body ? 'card-body' : false, color ? (outline ? 'border' : 'bg') + \"-\" + color : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCard.propTypes = propTypes;\nCard.defaultProps = defaultProps;\nexport default Card;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"innerRef\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardBody = function CardBody(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      innerRef = props.innerRef,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, 'card-body'), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCardBody.propTypes = propTypes;\nCardBody.defaultProps = defaultProps;\nexport default CardBody;","import {GET_CONFIG_DUMP, GET_PROVIDERS, REQUEST_ERROR, REQUEST_SUCCESS} from \"./types\";\nimport {getAllConfigDump, getAllProviders} from \"rclone-api\";\n\n/**\n * Gets all Providers from the rclone UI Backend\n * @returns {Function}\n */\nexport const getProviders = () => dispatch => {\n    getAllProviders().then(data => dispatch({\n        type: GET_PROVIDERS,\n        payload: data.providers\n    }))\n};\n/**\n * Gets dump of configured remotes from the rclone backend\n * @returns {Function}\n */\nexport const getConfigDump = () => dispatch => {\n    getAllConfigDump().then(res => dispatch({\n        type: GET_CONFIG_DUMP,\n        status: REQUEST_SUCCESS,\n        payload: res\n    }), error => dispatch({\n        type: GET_CONFIG_DUMP,\n        status: REQUEST_ERROR,\n        payload: error\n    }))\n};\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"valid\", \"tooltip\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  valid: PropTypes.bool,\n  tooltip: PropTypes.bool\n};\nvar defaultProps = {\n  tag: 'div',\n  valid: undefined\n};\n\nvar FormFeedback = function FormFeedback(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      valid = props.valid,\n      tooltip = props.tooltip,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var validMode = tooltip ? 'tooltip' : 'feedback';\n  var classes = mapToCssModules(classNames(className, valid ? \"valid-\" + validMode : \"invalid-\" + validMode), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormFeedback.propTypes = propTypes;\nFormFeedback.defaultProps = defaultProps;\nexport default FormFeedback;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _excluded = [\"tag\", \"isOpen\", \"className\", \"navbar\", \"cssModule\", \"children\", \"innerRef\"];\n\nvar _transitionStatusToCl;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Transition } from 'react-transition-group';\nimport { mapToCssModules, omit, pick, TransitionTimeouts, TransitionPropTypeKeys, TransitionStatuses, tagPropType } from './utils';\n\nvar propTypes = _objectSpread(_objectSpread({}, Transition.propTypes), {}, {\n  isOpen: PropTypes.bool,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  tag: tagPropType,\n  className: PropTypes.node,\n  navbar: PropTypes.bool,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n});\n\nvar defaultProps = _objectSpread(_objectSpread({}, Transition.defaultProps), {}, {\n  isOpen: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  tag: 'div',\n  timeout: TransitionTimeouts.Collapse\n});\n\nvar transitionStatusToClassHash = (_transitionStatusToCl = {}, _transitionStatusToCl[TransitionStatuses.ENTERING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.ENTERED] = 'collapse show', _transitionStatusToCl[TransitionStatuses.EXITING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.EXITED] = 'collapse', _transitionStatusToCl);\n\nfunction getTransitionClass(status) {\n  return transitionStatusToClassHash[status] || 'collapse';\n}\n\nfunction getHeight(node) {\n  return node.scrollHeight;\n}\n\nvar Collapse = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Collapse, _Component);\n\n  function Collapse(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.state = {\n      height: null\n    };\n    ['onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited'].forEach(function (name) {\n      _this[name] = _this[name].bind(_assertThisInitialized(_this));\n    });\n    return _this;\n  }\n\n  var _proto = Collapse.prototype;\n\n  _proto.onEntering = function onEntering(node, isAppearing) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onEntering(node, isAppearing);\n  };\n\n  _proto.onEntered = function onEntered(node, isAppearing) {\n    this.setState({\n      height: null\n    });\n    this.props.onEntered(node, isAppearing);\n  };\n\n  _proto.onExit = function onExit(node) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onExit(node);\n  };\n\n  _proto.onExiting = function onExiting(node) {\n    // getting this variable triggers a reflow\n    var _unused = node.offsetHeight; // eslint-disable-line no-unused-vars\n\n    this.setState({\n      height: 0\n    });\n    this.props.onExiting(node);\n  };\n\n  _proto.onExited = function onExited(node) {\n    this.setState({\n      height: null\n    });\n    this.props.onExited(node);\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        Tag = _this$props.tag,\n        isOpen = _this$props.isOpen,\n        className = _this$props.className,\n        navbar = _this$props.navbar,\n        cssModule = _this$props.cssModule,\n        children = _this$props.children,\n        innerRef = _this$props.innerRef,\n        otherProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n    var height = this.state.height;\n    var transitionProps = pick(otherProps, TransitionPropTypeKeys);\n    var childProps = omit(otherProps, TransitionPropTypeKeys);\n    return /*#__PURE__*/React.createElement(Transition, _extends({}, transitionProps, {\n      in: isOpen,\n      onEntering: this.onEntering,\n      onEntered: this.onEntered,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }), function (status) {\n      var collapseClass = getTransitionClass(status);\n      var classes = mapToCssModules(classNames(className, collapseClass, navbar && 'navbar-collapse'), cssModule);\n      var style = height === null ? null : {\n        height: height\n      };\n      return /*#__PURE__*/React.createElement(Tag, _extends({}, childProps, {\n        style: _objectSpread(_objectSpread({}, childProps.style), style),\n        className: classes,\n        ref: _this2.props.innerRef\n      }), children);\n    });\n  };\n\n  return Collapse;\n}(Component);\n\nCollapse.propTypes = propTypes;\nCollapse.defaultProps = defaultProps;\nexport default Collapse;","import React from \"react\";\nimport {Button, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\nimport * as  PropTypes from \"prop-types\";\nimport ErrorBoundary from \"../../../ErrorHandling/ErrorBoundary\";\n\n\nclass NewDriveAuthModal extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n\n    render() {\n        const {isVisible} = this.props;\n        return (\n            <div>\n                <ErrorBoundary>\n                    <Modal isOpen={isVisible} toggle={this.toggle}>\n                        <ModalHeader toggle={this.toggle} data-test=\"modalHeader\">Configuring your drive.</ModalHeader>\n                        <ModalBody data-test=\"modalBody\">\n                            A page will open for you with the authentication for your drive. This modal will\n                            automatically\n                            dismiss upon successful creation\n                        </ModalBody>\n                        <ModalFooter data-test=\"modalFooter\">\n                            <Button color=\"primary\" onClick={this.toggle}>Done</Button>{' '}\n                            {/*<Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>*/}\n                        </ModalFooter>\n                    </Modal>\n                </ErrorBoundary>\n            </div>\n        );\n    }\n}\n\nNewDriveAuthModal.propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired\n};\nNewDriveAuthModal.defaultProps = {\n    isVisible: true,\n};\n\n\nexport default NewDriveAuthModal;","import Autosuggest from 'react-autosuggest';\nimport React from \"react\";\nimport {findFromConfig} from \"../../../utils/Tools\";\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (config, value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    if (inputLength === 0) {\n        return config;\n\n    }\n\n    return inputLength === 0 ? [] : config.filter(lang =>\n        lang.Description.toLowerCase().slice(0, inputLength) === inputValue\n    );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.Prefix;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion.Description}\n    </div>\n);\n\nclass ProviderAutoSuggest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            suggestions: []\n        };\n    }\n\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({value}) => {\n        // console.log(value);\n        this.setState({\n            suggestions: getSuggestions(this.props.suggestions, value)\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n\n    render() {\n        const {value, onChange, suggestions} = this.props;\n        const currentConfig = findFromConfig(suggestions, value);\n        let renderVal = \"\";\n        if (currentConfig === undefined) {\n            renderVal = value;\n        } else {\n            renderVal = currentConfig.Description;\n        }\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Type a provider type',\n            value: renderVal,\n            onChange: onChange\n        };\n\n        // Finally, render it!\n        return (\n            <Autosuggest\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                alwaysRenderSuggestions={true}\n                highlightFirstSuggestion={true}\n                inputProps={inputProps}\n            />\n        );\n    }\n}\n\nexport default ProviderAutoSuggest;","import React from 'react';\nimport {Button, Card, CardBody, Col, Collapse, Container, FormFeedback, FormGroup, Input, Label, Row} from \"reactstrap\";\n// import {config} from \"./config.js\";\nimport NewDriveAuthModal from \"../../Base/NewDriveAuthModal\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {\n    findFromConfig,\n    isEmpty,\n    validateDriveName,\n    validateDuration,\n    validateInt,\n    validateSizeSuffix\n} from \"../../../utils/Tools\";\nimport ProviderAutoSuggest from \"./ProviderAutoSuggest\";\nimport {toast} from \"react-toastify\";\nimport * as PropTypes from 'prop-types';\nimport {getProviders} from \"../../../actions/configActions\";\nimport {connect} from \"react-redux\";\nimport {NEW_DRIVE_CONFIG_REFRESH_TIMEOUT} from \"../../../utils/Constants\";\nimport ErrorBoundary from \"../../../ErrorHandling/ErrorBoundary\";\nimport urls from \"../../../utils/API/endpoint\";\n\n/**\n * Returns a component with set of input, error for the drivePrefix.\n * The input type changes based on config.Options.Type parameter. see code for details.\n * @param drivePrefix   {string}    Name of the remote in the config.\n * @param loadAdvanced  {boolean}   Load or skip the advanced options from the config options.\n * @param changeHandler {function}  This function is called once the value changes\n * @param currentValues {$ObjMap}   This map denotes current updated values for the parameters.\n * @param isValidMap    {$ObjMap}   This map denotes whether the parameter value is valid. This should be set by the changeHandler.\n * @param errorsMap     {$ObjMap}   This map contains string errors of each parameters.\n * @param config        {$ObjMap}   This map contains the actual parameter list and Options for all the providers.\n * @returns             {Array|*}   JSX array with parameter formGroups.\n * @constructor\n */\nfunction DriveParameters({drivePrefix, loadAdvanced, changeHandler, currentValues, isValidMap, errorsMap, config}) {\n    if (drivePrefix !== undefined && drivePrefix !== \"\") {\n        const currentProvider = findFromConfig(config, drivePrefix);\n        let outputMap = [];\n        if (currentProvider !== undefined) {\n            const inputsMap = currentProvider.Options;\n\n            // console.log(\"current values\" + currentValues);\n\n            /* Options format is as follows\n            {\n                        \"Advanced\": true,\n                        \"Default\": -1,\n                        \"DefaultStr\": \"off\",\n                        \"Help\": \"If Object's are greater, use drive v2 API to download.\",\n                        \"Hide\": 0,\n                        \"IsPassword\": false,\n                        \"Name\": \"v2_download_min_size\",\n                        \"NoPrefix\": false,\n                        \"Provider\": \"\",\n                        \"Required\": false,\n                        \"ShortOpt\": \"\",\n                        \"Type\": \"SizeSuffix\",\n                        \"Value\": null,\n                        \"ValueStr\": \"off\"\n                    },\n\n            */\n\n            outputMap = inputsMap.map((attr, idx) => {\n                if (attr.Hide === 0 && ((loadAdvanced && attr.Advanced) || (!loadAdvanced && !attr.Advanced))) {\n                    const labelValue = `${attr.Help}`;\n                    const requiredValue = ((attr.Required) ? (<i className={\"text-red\"}>*</i>) : null);\n\n                    const hasExamples = !isEmpty(attr.Examples);\n                    let examplesMap = null;\n\n                    let inputType = \"\";\n\n\n                    if (attr.IsPassword) {\n                        inputType = \"password\";\n                    } else if (hasExamples) {\n                        inputType = \"string\";\n                        // examplesMap = attr.Examples.map((ex1, id1) => {\n                        //     return (<option key={\"option\" + id1} value={ex1.Value}>{ex1.Help}</option>);\n                        // })\n                    } else if (attr.Type === \"bool\") {\n                        inputType = \"select\";\n                        examplesMap = [\n                            (<option key={1} value={true}>Yes</option>),\n                            (<option key={2} value={false}>No</option>)\n                        ];\n                    } else {\n                        // TODO: Write logic for SizeSuffix, Duration, int\n                        if (attr.Type === \"int\") {\n                            inputType = \"number\";\n                        } else if (attr.Type === \"string\") {\n                            inputType = \"text\";\n                        } else {\n                            inputType = \"text\";\n                        }\n\n                    }\n                    return (\n                        <FormGroup key={idx} row>\n                            <Label for={attr.Name} sm={5}>{labelValue}{requiredValue}</Label>\n                            <Col sm={7}>\n                                <Input type={inputType} value={currentValues[attr.Name]}\n                                       name={attr.Name} valid={isValidMap[attr.Name]} invalid={!isValidMap[attr.Name]}\n                                       id={attr.Name} onChange={changeHandler} required={attr.Required}>\n                                    {examplesMap}\n                                </Input>\n                                <FormFeedback>{errorsMap[attr.Name]}</FormFeedback>\n\n                            </Col>\n                        </FormGroup>\n                    );\n                } else {\n                    return null;\n                }\n            });\n        }\n        return outputMap;\n    }\n    return (\n        <div>Select a drive type to continue</div>\n    );\n}\n\n// function DriveTypes({config}) {\n//     // console.log(config);\n//     let configMap = config.map((drive, idx) => (\n//         <option key={drive.Prefix} value={idx}>{drive.Description}</option>\n//     ));\n//     return configMap;\n// }\n\n\n/**\n * Functional Component. Custom input for selecting a new name for the current config.\n * @param key           {string}    Contains the key to be used as the react key parameter in an array\n * @param id            {string}    Id to be used as a HTML id.\n * @param label         {string}    Label of the form input\n * @param changeHandler {function}  Called when the input changes.\n * @param type          {string}    Type of the input (ReactStrap supported). Eg: select, text etc.\n * @param value         {string}    The current value of the input.\n * @param name          {string}    The html name for the input.\n * @param placeholder   {string}    Placeholder text for input.\n * @param isValid       {boolean}   If set, displays positive message, else displays error message.\n * @returns             {*}         Functional component.\n * @constructor\n */\nfunction CustomInput({key, id, label, changeHandler, type, value, name, placeholder, isValid = false}) {\n    return (\n        <FormGroup key={key} row>\n            <Label for={id} sm={5}>{label}</Label>\n            <Col sm={7}>\n                <Input type={type} value={value} name={name} placeholder={placeholder}\n                       id={id} onChange={changeHandler} valid={isValid} invalid={!isValid} required/>\n                <FormFeedback valid>Sweet! that name is available</FormFeedback>\n                <FormFeedback>Sad! That name is already assigned or empty</FormFeedback>\n            </Col>\n        </FormGroup>);\n}\n\n/**\n * Component to create a new remote configuration.\n */\nclass NewDrive extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n\n            colRconfig: true,\n            colSetup: false,\n            colAdvanced: false,\n            driveName: \"\",\n            driveNameIsEditable: true,\n\n            advancedOptions: false,\n            formValues: {},\n            formValuesValid: {},\n            required: {},\n            authModalIsVisible: false,\n\n            drivePrefix: \"\",\n            driveNameIsValid: false,\n            formErrors: {driveName: \"\"},\n            optionTypes: {},\n            isValid: {},\n\n            currentStepNumber: 1\n\n        };\n        this.configCheckInterval = null;\n        // console.log(\"Params\", this.props.match.params);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.toggleAuthModal = this.toggleAuthModal.bind(this);\n        this.startAuthentication = this.startAuthentication.bind(this);\n        this.checkConfigStatus = this.checkConfigStatus.bind(this);\n    }\n\n    /**\n     *\n     * @param e {$ObjMap} Event of the toggle event.\n     */\n    toggle = (e) => {\n        let name = e.target.name;\n\n        this.setState({[name]: !this.state[name]})\n    };\n\n    // Returns true or false based on whether the config is created\n    async checkConfigStatus() {\n        const {driveName} = this.state;\n\n        try {\n            let res = await axiosInstance.post(urls.getConfigForRemote, {name: driveName});\n            // console.log(res);\n\n            if (!isEmpty(res.data)) {\n                // Config is created, clear the interval and hide modal\n                clearInterval(this.configCheckInterval);\n                this.configCheckInterval = null;\n                this.toggleAuthModal();\n                this.props.history.push('/dashboard');\n\n            }\n        } catch (e) {\n            // console.log(`Error occurred while checking for config: ${e}`);\n            toast.error(`Error creating config. ${e}`, {\n                autoClose: false\n            });\n        }\n    }\n\n    /**\n     * Handle inoit change and set appropriate errors.\n     * @param e\n     */\n    handleInputChange = (e) => {\n\n        let inputName = e.target.name;\n        let inputValue = e.target.value;\n        const inputType = this.state.optionTypes[inputName];\n        this.setState({\n            formValues: {\n                ...this.state.formValues,\n                [inputName]: inputValue\n            }\n        });\n        let validateResult = true;\n        let error = \"\";\n        if (inputType === \"SizeSuffix\") {\n            validateResult = validateSizeSuffix(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is size( off | {unit}{metric} eg: 10G, 100M, 10G100M etc.)\"\n            }\n        } else if (inputType === \"Duration\") {\n            validateResult = validateDuration(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is time ({unit}{metric} eg: 10ms, 100m, 10h15ms etc.)\"\n            }\n        } else if (inputType === \"int\") {\n            validateResult = validateInt(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is int (100,200,300 etc)\"\n            }\n        }\n\n        if (this.state.required[inputName] && (!inputValue || inputValue === \"\")) {\n            validateResult = false;\n            if (!validateResult) {\n                error += \" This field is required\";\n            }\n        }\n\n\n        this.setState((prevState) => {\n            return {\n                isValid: {\n                    ...prevState.isValid,\n                    [inputName]: validateResult\n                },\n                formErrors: {\n                    ...prevState.formErrors,\n                    [inputName]: error\n                },\n            }\n        });\n\n\n    };\n\n    /**\n     * Update the driveType and then load the equivalent input parameters for that drive.\n     * @param event     {$ObjMap} Event to be handled.\n     * @param newValue  {string} new Value of the drive type.\n     */\n    changeDriveType = (event, {newValue}) => {\n\n        const {providers} = this.props;\n\n        let val = newValue;\n\n\n        let availableOptions = {};\n        let optionTypes = {};\n        let isValid = {};\n        let formErrors = {};\n        let required = {};\n        // let drivePrefix = \"\";\n        // console.log(\"driveType change\", val);\n        if (val !== undefined && val !== \"\") {\n\n            const currentConfig = findFromConfig(providers, val);\n            if (currentConfig !== undefined) {\n\n                currentConfig.Options.forEach(item => {\n\n                    const {DefaultStr, Type, Name, Required, Hide} = item;\n                    if (Hide === 0) {\n                        availableOptions[Name] = DefaultStr;\n                        optionTypes[Name] = Type;\n                        required[Name] = Required;\n\n                        isValid[Name] = !(Required && (!DefaultStr || DefaultStr === \"\"));\n\n                        formErrors[Name] = \"\";\n                    }\n                });\n            }\n            this.setState({\n                drivePrefix: val,\n                formValues: availableOptions,\n                optionTypes: optionTypes,\n                isValid: isValid,\n                formErrors: formErrors,\n                required: required\n            });\n        } else {\n            this.setState({drivePrefix: val})\n\n        }\n    };\n\n    /**\n     * Open second step of setting up the drive and scroll into view.\n     */\n    openSetupDrive = (e) => {\n        if (e) e.preventDefault();\n        this.setState({'colSetup': true});\n        // this.setupDriveDiv.scrollIntoView({behavior: \"smooth\"});\n    };\n\n    /**\n     *  toggle the step 3: advanced options\n     */\n    editAdvancedOptions = (e) => {\n        this.setState({advancedOptions: !this.state.advancedOptions});\n    };\n\n    /**\n     * Validate the form and set the appropriate errors in the state.\n     * @returns {boolean}\n     */\n    validateForm() {\n        //    Validate driveName and other parameters\n        const {driveNameIsValid, drivePrefix, isValid} = this.state;\n        let flag = true;\n\n        if (!driveNameIsValid) {\n            flag = false;\n        }\n        if (drivePrefix === \"\") {\n            flag = false;\n        }\n\n\n        /*Check for validations based on inputType*/\n        for (const [key, value] of Object.entries(isValid)) {\n            if (!key || !value) {\n                flag = false;\n                break;\n            }\n        }\n\n        return flag;\n    }\n\n    /**\n     *  Show or hide the auth modal.\n     */\n    toggleAuthModal() {\n        this.setState((state, props) => {\n            return {authModalIsVisible: !state.authModalIsVisible}\n        });\n    }\n\n    /**\n     *  Show or hide the authentication modal and start timer for checking if the new config is created.\n     */\n    startAuthentication() {\n        this.toggleAuthModal();\n        // Check every second if the config is created\n        if (this.configCheckInterval === null) {\n            this.configCheckInterval = setInterval(this.checkConfigStatus, NEW_DRIVE_CONFIG_REFRESH_TIMEOUT);\n        } else {\n            console.error(\"Interval already running. Should not start a new one\");\n        }\n\n    }\n\n    /**\n     *  Called when the config is successfully created. Clears the timout and hides the authentication modal.\n     */\n    stopAuthentication() {\n        this.setState((state, props) => {\n            return {authModalIsVisible: false}\n        });\n        clearInterval(this.configCheckInterval);\n\n    }\n\n    /**\n     * Called when form action submit is to be handled.\n     * Validate form and submit request.\n     * */\n    async handleSubmit(e) {\n        e && e.preventDefault();\n        // console.log(\"Submitted form\");\n\n        const {formValues, drivePrefix} = this.state;\n        const {providers} = this.props;\n\n\n        if (this.validateForm()) {\n\n            if (drivePrefix !== undefined && drivePrefix !== \"\") {\n                const currentProvider = findFromConfig(providers, drivePrefix);\n                if (currentProvider !== undefined) {\n\n\n                    const defaults = currentProvider.Options;\n\n                    // console.log(config, formValues, defaults);\n\n                    let finalParameterValues = {};\n\n\n                    for (const [key, value] of Object.entries(formValues)) {\n\n                        if (key === \"token\") {\n                            finalParameterValues[key] = value;\n                            continue;\n                        }\n                        const defaultValueObj = defaults.find((ele, idx, array) => {\n                            // console.log(key, ele.Name, key === ele.Name);\n                            return (key === ele.Name);\n                        });\n                        if (defaultValueObj) {\n\n                            const {DefaultStr} = defaultValueObj;\n                            if (value !== DefaultStr) {\n                                // console.log(`${value} !== ${DefaultStr}`);\n                                finalParameterValues[key] = value;\n                            }\n                        }\n\n                    }\n\n\n                    let data = {\n                        parameters: finalParameterValues,\n\n                        name: this.state.driveName,\n                        type: this.state.drivePrefix\n                    };\n\n\n                    // console.log(\"Validated form\");\n                    this.startAuthentication();\n                    try {\n                        const {drivePrefix} = this.props.match.params;\n\n                        if (!drivePrefix) {\n\n                            await axiosInstance.post(urls.createConfig, data);\n                            toast.info(\"Config created\");\n                        } else {\n                            await axiosInstance.post(urls.updateConfig, data);\n                            toast.info(\"Config Updated\");\n                        }\n\n                    } catch (err) {\n                        toast.error(`Error creating config. ${err}`, {\n                            autoClose: false\n                        });\n                        this.stopAuthentication();\n                    }\n\n                }\n            }\n        } else {\n            // if (!this.state.colSetup) {\n            //     this.openSetupDrive();\n            // }\n\n            // if (this.state.advancedOptions && !this.state.colAdvanced) {\n            //     this.openAdvancedSettings();\n            // }\n            toast.warn(`Check for errors before submitting.`, {\n                autoClose: false\n            });\n        }\n    }\n\n    /**\n     * Clears the entire form.\n     * Clearing the driveName and drivePrefix automatically clears the inputs as well.\n     * */\n    clearForm = _ => {\n        this.setState({driveName: \"\", drivePrefix: \"\"})\n    };\n\n\n    /**\n     * Change the name of the drive. Check if it already exists, if not, allow to be changes, else set error.\n     * */\n    changeName = e => {\n        const {driveNameIsEditable} = this.state;\n        const value = e.target.value;\n        if (driveNameIsEditable && validateDriveName(value)) {\n\n            this.setState({driveName: value}, () => {\n\n                if (value === undefined || value === \"\") {\n                    this.setState({driveNameIsValid: false});\n                } else {\n\n                    axiosInstance.post(urls.getConfigForRemote, {name: value}).then((response) => {\n                        let errors = this.state.formErrors;\n                        let isValid = isEmpty(response.data);\n                        if (isValid) {\n                            errors[\"driveName\"] = \"\";\n                        } else {\n                            errors[\"driveName\"] = \"Duplicate\";\n\n                        }\n                        this.setState({formErrors: errors, driveNameIsValid: isValid});\n                    });\n                }\n\n            });\n\n        } else {\n            this.setState((prevState) => ({formErrors: {...prevState.formErrors, \"driveName\": \"Cannot edit name\"}}))\n        }\n    };\n\n    /**\n     * Open the advanced settings card and scroll into view.\n     * @param e\n     */\n    openAdvancedSettings = e => {\n        if (this.state.advancedOptions) {\n            this.setState({colAdvanced: true});\n        } else {\n            this.configEndDiv.scrollIntoView({behavior: \"smooth\"});\n        }\n    };\n\n\n    /**\n     * Check if the provider list is empty else request new providers list.\n     * */\n\n    componentDidMount() {\n        const {drivePrefix} = this.props.match.params;\n\n\n        if (!this.props.providers || this.props.providers.length < 1)\n            this.props.getProviders();\n\n        if (drivePrefix) {\n            //Edit Mode\n            this.setState({driveName: drivePrefix, driveNameIsValid: true, driveNameIsEditable: false});\n            axiosInstance.post(urls.getConfigForRemote, {name: drivePrefix}).then(\n                (res) => {\n                    console.log(res);\n                    this.changeDriveType(undefined, {newValue: res.data.type});\n\n                    this.setState((prevState) => ({\n                        formValues: {...prevState.formValues, ...res.data}\n                    }))\n\n                }\n            )\n        }\n    }\n\n    /**\n     * Clear the intervals.\n     * */\n\n    componentWillUnmount() {\n        clearInterval(this.configCheckInterval);\n        this.configCheckInterval = null;\n    }\n\n    gotoNextStep = () => {\n        const {currentStepNumber, advancedOptions} = this.state;\n        if ((advancedOptions && currentStepNumber === 3) || (!advancedOptions && currentStepNumber === 2)) {\n            this.handleSubmit(null);\n        } else {\n            this.setCurrentStep(currentStepNumber + 1);\n        }\n    };\n\n    gotoPrevStep = () => {\n        const {currentStepNumber} = this.state;\n        this.setCurrentStep(currentStepNumber - 1);\n    };\n\n\n    setCurrentStep = (stepNo) => {\n        this.setState({currentStepNumber: stepNo});\n\n    };\n\n    StepShowCase = ({currentStepNumber}) => {\n        const buttonActiveClassName = \"step-active\";\n        const stepTitles = [\n            \"Set up Remote Config\",\n            \"Set up Drive\",\n            \"Advanced Config\"\n        ];\n\n        return (\n            <Container className=\"timeline\">\n                <Row>\n                    {stepTitles.map((item, idx) => {\n                        idx += 1;\n                        return (\n                            <React.Fragment key={idx}>\n                                <Col\n                                    className={\"text-center \" + ((currentStepNumber === idx) ? buttonActiveClassName : \"\")}\n                                    md={2} sm={4}>\n                                    <button className=\"btn btn-step-count\"\n                                            onClick={() => this.setCurrentStep(idx)}>{idx}</button>\n                                    <h4>{item}</h4>\n                                </Col>\n                                {idx !== stepTitles.length && <Col md={3} className={\"d-none d-md-block\"}>\n                                    <div className=\"timeline-divider align-middle\"></div>\n\n                                </Col>}\n                            </React.Fragment>\n                        )\n                    })}\n\n                </Row>\n            </Container>\n        )\n\n    }\n\n    /* return (\n            <div className=\"timeline\">\n                <span className=\"li complete\">\n                    <button className=\"btn btn-primary btn-step-count\">1</button>\n                    <div class=\"status\">\n                        <h4> Shift Created </h4>\n                    </div>    \n                </span> \n                <div className=\"timeline-divider\"></div>  \n                <li className=\"li complete\">\n                    <div class=\"status\">\n                        <h4> Shift Created </h4>\n                    </div>    \n                </li>   \n                <li className=\"li complete\">\n                    <div class=\"status\">\n                        <h4> Shift Created </h4>\n                    </div>    \n                </li>    \n            </div>\n       ) */\n\n\n    render() {\n        const {drivePrefix, advancedOptions, driveName, driveNameIsValid, currentStepNumber} = this.state;\n        const {providers} = this.props;\n        return (\n            <div data-test=\"newDriveComponent\">\n                <ErrorBoundary>\n                    <p>This 3 step process will guide you through creating a new config. For auto config, leave the\n                        parameters as it is.</p>\n                    <this.StepShowCase currentStepNumber={currentStepNumber}/>\n                    <Collapse isOpen={currentStepNumber === 1}>\n                        <Card>\n\n                            <CardBody>\n                                <CustomInput label=\"Name of this drive (For your reference)\"\n                                             changeHandler={this.changeName} value={driveName}\n                                             placeholder={\"Enter a name\"} name=\"name\" id=\"driveName\"\n                                             isValid={driveNameIsValid}/>\n\n                                <FormGroup row>\n                                    <Label for=\"driveType\" sm={5}>Select</Label>\n                                    <Col sm={7}>\n                                        <ProviderAutoSuggest suggestions={providers} value={drivePrefix}\n                                                             onChange={this.changeDriveType}/>\n                                    </Col>\n                                </FormGroup>\n                                <FormGroup row>\n                                    <Col sm={3}>\n                                        <Label for=\"inputDriveName\">Docs are available at </Label>{' '}\n                                        <a href=\"https://rclone.org/commands/rclone_config/\">Rclone Config</a>\n                                    </Col>\n                                </FormGroup>\n                                <div className=\"clearfix\">\n                                    <div className=\"float-right\">\n\n                                        <Button className=\"ml-3 btn-blue\" onClick={this.gotoNextStep}>Next</Button>\n\n                                    </div>\n                                </div>\n                            </CardBody>\n\n                        </Card>\n                    </Collapse>\n                    <Collapse isOpen={currentStepNumber === 2}>\n                        <Card>\n                            {/*div for Scrolling to here*/}\n                            {/* <div ref={(el) => this.setupDriveDiv = el}/> */}\n                            <CardBody>\n                                <DriveParameters drivePrefix={drivePrefix} loadAdvanced={false}\n                                                 changeHandler={this.handleInputChange}\n                                                 errorsMap={this.state.formErrors}\n                                                 isValidMap={this.state.isValid}\n                                                 currentValues={this.state.formValues} config={providers}/>\n\n                                <div className=\"clearfix\">\n                                    <div className=\"float-right\">\n                                        <Input type=\"checkbox\" value={advancedOptions}\n                                               onChange={this.editAdvancedOptions}/><span className=\"mr-3\">Edit Advanced Options</span>\n                                        <Button className=\"btn-no-background\" onClick={this.gotoPrevStep}>Go\n                                            back</Button>\n\n                                        <Button className=\"ml-3 btn-blue\" onClick={this.gotoNextStep}>Next</Button>\n\n                                    </div>\n                                </div>\n                            </CardBody>\n                        </Card>\n                    </Collapse>\n                    <Collapse isOpen={currentStepNumber === 3}>\n                        <Card>\n                            {/* <CardHeader>\n                                    <h5>\n                                        <Button color=\"link\" name=\"colAdvanced\" onClick={this.toggle}\n                                                style={{marginBottom: '1rem'}}><strong>Step 3:</strong> Advanced\n                                            (optional)</Button>\n\n                                    </h5>\n\n                                </CardHeader> */}\n\n\n                            <CardBody>\n                                <DriveParameters drivePrefix={drivePrefix} loadAdvanced={true}\n                                                 changeHandler={this.handleInputChange}\n                                                 errorsMap={this.state.formErrors}\n                                                 isValidMap={this.state.isValid}\n                                                 currentValues={this.state.formValues} config={providers}/>\n\n                                <div className=\"clearfix\">\n                                    <div className=\"float-right\">\n                                        <Input type=\"checkbox\" value={advancedOptions}\n                                               onChange={this.editAdvancedOptions}/><span className=\"mr-3\">Edit Advanced Options</span>\n                                        <Button className=\"btn-no-background\" onClick={this.gotoPrevStep}>Go\n                                            back</Button>\n\n                                        <Button className=\"ml-3 btn-blue\" onClick={this.gotoNextStep}>Next</Button>\n                                    </div>\n                                </div>\n                            </CardBody>\n\n\n                        </Card>\n                    </Collapse>\n                    {/* <div className=\"clearfix\" ref={(el) => {\n                            this.configEndDiv = el\n                        }}>\n                            <div className=\"float-right mb-3\">\n                                <Button color=\"info\" type=\"reset\" onClick={() => this.clearForm()}>Clear</Button>\n                                <Button color=\"success\" type=\"submit\">Create Config</Button>\n\n                            </div>\n                        </div> */}\n                    <NewDriveAuthModal isVisible={this.state.authModalIsVisible} closeModal={this.toggleAuthModal}/>\n                </ErrorBoundary>\n            </div>);\n    }\n}\n\nconst mapStateToProps = state => ({\n    /**\n     * The list of all providers.\n     */\n    providers: state.config.providers\n});\n\nNewDrive.propTypes = {\n    providers: PropTypes.array.isRequired,\n    getProviders: PropTypes.func.isRequired,\n    isEdit: PropTypes.bool.isRequired,\n    driveName: PropTypes.string\n};\n\nNewDrive.defaultProps = {\n    isEdit: false,\n};\n\nexport default connect(mapStateToProps, {getProviders})(NewDrive);\n"],"sourceRoot":""}